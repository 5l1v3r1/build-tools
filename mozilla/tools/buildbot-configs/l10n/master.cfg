# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### Reload imported modules
# l10n logic
import buildbotcustom.steps.shell
reload(buildbotcustom.steps.shell)
import buildbotcustom.l10n
reload(buildbotcustom.l10n)
import buildbotcustom.log
reload(buildbotcustom.log)
# compare locales logic
import buildbotcustom.steps.comparestep
reload(buildbotcustom.steps.comparestep)


buildbotcustom.log.init(scheduler = buildbotcustom.log.DEBUG,
                        dispatcher = buildbotcustom.log.DEBUG)

# make getPage silent, comment out for debugging purposes
from twisted.web.client import HTTPClientFactory
HTTPClientFactory.noisy = False

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("1slave", "pwd"),
               BuildSlave("2slave", "pwd"),
               BuildSlave("3slave", "pwd")]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9988

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []

from buildbot.changes.pb import PBChangeSource
from buildbot.changes.bonsaipoller import BonsaiPoller
from buildbotcustom.changes.hgpoller import HgAllLocalesPoller, HgPoller

c['change_source'].append(PBChangeSource())
bp = BonsaiPoller('http://bonsai-l10n.mozilla.org', 'all', 'HEAD',
                  cvsroot='/l10n', pollInterval = 5*30)
c['change_source'].append(bp)

ep = BonsaiPoller('http://bonsai.mozilla.org', 'PhoenixTinderbox', 'HEAD',
                  cvsroot='/cvsroot', pollInterval = 5*30)
c['change_source'].append(ep)

hgp = HgAllLocalesPoller('http://hg.mozilla.org/mozilla-central/raw-file/tip/browser/locales/all-locales',
                         'http://hg.mozilla.org/',
                         'l10n-central',
                         pollInterval = 180)
c['change_source'].append(hgp)

chgp = HgPoller('http://hg.mozilla.org/', 'mozilla-central',
                pollInterval = 180)
c['change_source'].append(chgp)
chgp = HgPoller('http://hg.mozilla.org/', 'comm-central',
                pollInterval = 180)
c['change_source'].append(chgp)

####### SCHEDULERS

## configure the Schedulers

c['schedulers'] = []

from buildbotcustom.l10n import Scheduler, Build

s = Scheduler("l10n", "l10nbuilds.ini")
c['schedulers'].append(s)

####### BUILDERS

c['builders'] = []

from buildbot.process import factory

from buildbotcustom.steps.shell import CVSCO, MakeCheckout, Configure, Upload
from buildbotcustom.steps.comparestep import CompareLocale
from buildbot.steps.shell import WithProperties, ShellCommand
from buildbotcustom.l10n import repositories as r
from buildbotcustom.l10n import configureDispatcher

i_f = factory.BuildFactory()
  
i_f.buildClass = Build
  
i_f.addStep(CVSCO, workdir = WithProperties('%(tree)s'),
            cvsroot=r.mozilla.repository,
            cvsmodule = 'mozilla/client.mk',
            branch = dict(fx30x=None, incubator='MOZILLA_1_8_BRANCH'))
i_f.addStep(MakeCheckout, workdir = WithProperties('%(tree)s/mozilla'),
            command = ['make', '-f', 'client.mk', 'l10n-checkout'])
i_f.addStep(CompareLocale, workdir = WithProperties('%(tree)s'),
            inipath = WithProperties('mozilla/%(app)s/locales/l10n.ini'),
            l10nbase = WithProperties('l10n'),
            locale = WithProperties('%(locale)s'),
            label = WithProperties('%(tree)s'),
            report = True)
i_f.addStep(Configure, app = WithProperties('%(app)s'),
            srcdir = '../mozilla',
            args = ['--disable-compile-environment', '--disable-ogg'],
            workdir = WithProperties('%(tree)s/%(app)s'))
i_f.addStep(ShellCommand,
            workdir = WithProperties('%(tree)s/%(app)s/%(app)s/locales'),
            command = ['make', WithProperties('langpack-%(locale)s')])
i_f.addStep(Upload,
            workdir = WithProperties('%(tree)s/%(app)s/dist/install'),
            scp_dest = WithProperties('~/public_html/%(tree)s'),
            http_dest = WithProperties('http://l10n.mozilla.org/~buildslave/%(tree)s'))

linux_builder = {'name': 'linux-langpack',
                 'slavenames': ['1slave','2slave','3slave'],
                 'builddir': 'linux-langpack',
                 'factory': i_f,
                 }
c['builders'].append(linux_builder)


from buildbotcustom.steps.shell import LocaleMercurial

hg_f = factory.BuildFactory()
  
hg_f.buildClass = Build

hg_f.addStep(ShellCommand,
             workdir = WithProperties('%(tree)s'),
             command = ['mkdir', '-p', 'l10n-central'])
hg_f.addStep(ShellCommand,
             workdir = WithProperties('%(tree)s'),
             command = ['sh', '-c',
                        'if [ -d mozilla-central ]; then ' +
                        'hg -R mozilla-central pull ; ' +
                        'else ' +
                        'hg clone http://hg.mozilla.org/mozilla-central/ ; ' +
                        'fi '
                        '&& hg -R mozilla-central update'])
hg_f.addStep(LocaleMercurial,
             locale = WithProperties('%(locale)s'),
             repourl = WithProperties('http://hg.mozilla.org/l10n-central/%(locale)s/'),
             localesBranch = 'l10n-central',
             workdir = WithProperties('%(tree)s/l10n-central/%(locale)s'))
hg_f.addStep(CompareLocale, workdir = WithProperties('%(tree)s'),
            inipath = WithProperties('mozilla-central/%(app)s/locales/l10n.ini'),
            l10nbase = WithProperties('l10n-central'),
            locale = WithProperties('%(locale)s'),
            label = WithProperties('%(tree)s'),
            report = True)
hg_f.addStep(ShellCommand,
             workdir = WithProperties('%(tree)s/mozilla-central'),
             command = ['autoconf'])
hg_f.addStep(Configure, app = WithProperties('%(app)s'),
            srcdir = '../mozilla-central',
            args = ['--disable-compile-environment', '--disable-ogg',
                    '--with-l10n-base=../l10n-central'],
            workdir = WithProperties('%(tree)s/%(app)s'))
hg_f.addStep(ShellCommand,
            workdir = WithProperties('%(tree)s/%(app)s/%(app)s/locales'),
            command = ['make', WithProperties('langpack-%(locale)s')])
hg_f.addStep(Upload,
            workdir = WithProperties('%(tree)s/%(app)s/dist/install'),
            scp_dest = WithProperties('~/public_html/%(tree)s'),
            http_dest = WithProperties('http://l10n.mozilla.org/~buildslave/%(tree)s'))

c['builders'].append(dict(name = 'hg-langpack',
                          slavenames = ['1slave','2slave','3slave'],
                          builddir = 'hg-langpack',
                          factory = hg_f))
              
hg_c_m_f = factory.BuildFactory()
  
hg_c_m_f.buildClass = Build

hg_c_m_f.addStep(ShellCommand,
             workdir = WithProperties('%(tree)s'),
             command = ['mkdir', '-p', 'l10n-central'])
hg_c_m_f.addStep(ShellCommand,
             workdir = WithProperties('%(tree)s'),
             command = ['sh', '-c',
                        'if [ -d comm-central ]; then ' +
                        'hg -R comm-central pull ; ' +
                        'else ' +
                        'hg clone http://hg.mozilla.org/comm-central/ ; ' +
                        'fi '
                        '&& hg -R comm-central update'])
hg_c_m_f.addStep(ShellCommand,
                 workdir = WithProperties('%(tree)s/comm-central'),
                 command = ['python',
                            'client.py', 'checkout'])
hg_c_m_f.addStep(LocaleMercurial,
             locale = WithProperties('%(locale)s'),
             repourl = WithProperties('http://hg.mozilla.org/l10n-central/%(locale)s/'),
             localesBranch = 'l10n-central',
             workdir = WithProperties('%(tree)s/l10n-central/%(locale)s'))
hg_c_m_f.addStep(CompareLocale, workdir = WithProperties('%(tree)s'),
            inipath = WithProperties('comm-central/%(app)s/locales/l10n.ini'),
            l10nbase = WithProperties('l10n-central'),
            locale = WithProperties('%(locale)s'),
            label = WithProperties('%(tree)s'),
            report = True)
# comm-central is brittle with calling configure, just don't
# hg_c_m_f.addStep(ShellCommand,
#              workdir = WithProperties('%(tree)s/comm-central'),
#              command = ['autoconf'])
# hg_c_m_f.addStep(ShellCommand,
#              workdir = WithProperties('%(tree)s/comm-central/mozilla'),
#              command = ['autoconf'])
# hg_c_m_f.addStep(Configure, app = WithProperties('%(app)s'),
#             srcdir = '../comm-central',
#             args = ['--disable-compile-environment', '--disable-ogg',
#                     '--with-l10n-base=../l10n-central'],
#             workdir = WithProperties('%(tree)s/%(app)s'))
# hg_c_m_f.addStep(ShellCommand,
#             workdir = WithProperties('%(tree)s/%(app)s/%(app)s/locales'),
#             command = ['make', WithProperties('langpack-%(locale)s')])
# hg_c_m_f.addStep(Upload,
#             workdir = WithProperties('%(tree)s/%(app)s/dist/install'),
#             scp_dest = WithProperties('~/public_html/%(tree)s'),
#             http_dest = WithProperties('http://l10n.mozilla.org/~buildslave/%(tree)s'))

c['builders'].append(dict(name = 'hg-comm-langpack',
                          slavenames = ['1slave','2slave','3slave'],
                          builddir = 'hg-comm-langpack',
                          factory = hg_c_m_f))
                          

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

#from buildbot.status.html import WebStatus
from buildbotcustom.status.l10n import WebStatus, LatestL10n
public = WebStatus(http_port="tcp:8373:interface=127.0.0.1",
                   allowForce=False)
private = WebStatus(http_port="tcp:8374:interface=127.0.0.1",
                    allowForce=True)

c['status'] = [public, private]
c['status'].append(LatestL10n(['linux-langpack', 'hg-langpack', 'hg-comm-langpack']))

if False:
  from buildbot.status.tinderbox import TinderboxMailNotifier
  tbn = TinderboxMailNotifier(fromaddr="l10n@mozilla.com",
                              tree="MozillaTest",
                              columnName = WithProperties("%(buildername)s %(slavename)s"),
                              extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                              builders = ['linux-langpack'],
                              logCompression="bzip2")
  c['status'].append(tbn)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "L10n Trunk"
c['projectURL'] = "http://wiki.mozilla.org/L10n:Incubator"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8374/"
c['buildbotURL'] = "http://l10n.mozilla.org/buildbot/"
