# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### Reload imported modules
# l10n logic
import buildbotcustom.steps.shell
reload(buildbotcustom.steps.shell)
import buildbotcustom.l10n
reload(buildbotcustom.l10n)
import buildbotcustom.log
reload(buildbotcustom.log)
# compare locales logic
import buildbotcustom.steps.comparestep
reload(buildbotcustom.steps.comparestep)


buildbotcustom.log.init(scheduler = buildbotcustom.log.DEBUG,
                        dispatcher = buildbotcustom.log.DEBUG)

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("1slave", "pwd"),
               BuildSlave("2slave", "pwd"),
               BuildSlave("3slave", "pwd")]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9988

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []

from buildbot.changes.pb import PBChangeSource
from buildbot.changes.bonsaipoller import BonsaiPoller

c['change_source'].append(PBChangeSource())
bp = BonsaiPoller('http://bonsai-l10n.mozilla.org', 'all', 'HEAD',
                  cvsroot='/l10n', pollInterval = 5*30)
c['change_source'].append(bp)

ep = BonsaiPoller('http://bonsai.mozilla.org', 'PhoenixTinderbox', 'HEAD',
                  cvsroot='/cvsroot', pollInterval = 5*30)
c['change_source'].append(ep)


####### SCHEDULERS

## configure the Schedulers

c['schedulers'] = []

from buildbotcustom.l10n import Scheduler, Build

s = Scheduler("l10n")
c['schedulers'].append(s)

Build.buildQueue = s

####### BUILDERS

c['builders'] = []

from buildbot.process import factory

from buildbotcustom.steps.shell import CVSCO, MakeCheckout, Configure, Upload
from buildbotcustom.steps.comparestep import CompareLocale
from buildbot.steps.shell import WithProperties, ShellCommand
from buildbotcustom.l10n import repositories as r
from buildbotcustom.l10n import getInfoFor, L10nDispatcher, EnDispatcher

##
# Tree-dependent configuration variables.
# Store branches and locale settings for the trees built.
# Current trees are
# - incubator (1.8 branch against l10n trunk, selected locales)
# - trunk (HEAD vs HEAD, all locales for browser)

branchconf = dict(
  l10n = dict(
    incubator = 'HEAD',
    trunk = 'HEAD'),
  mozilla = dict(
    incubator = 'MOZILLA_1_8_BRANCH',
    trunk = 'HEAD')
  )

buildconf = dict(
  trunk = dict(
    apps = ['browser'],
    locales = None),
  incubator = dict(
    locales = dict(
      browser = ['bn-IN', 'fa', 'hi-IN', 'kn', 'lv', 'ml', 'mr', 'ne-NP', 'rw',  'sr', 'ta', 'te']
      ),
    apps = None)
  )

modules = dict(
  mozilla = {},
  l10n = {}
  )
apps = {}

# set up dispatchers with tree-dependent directories, collect check-out
# information for the builds
for tree in ['incubator', 'trunk']:
  locales = buildconf[tree]['locales']
  tree_apps = buildconf[tree]['apps']
  pathmap, locales = getInfoFor(tree, branchconf['mozilla'][tree],
                                apps = tree_apps, locales = locales)
  enUS_mod = ['mozilla/%s/config' % app for app in locales.keys()]
  enUS_mod += ['mozilla/' + leaf for leaf in
               ['client.mk', 'build', 'config']]
  # get all locale dirs for our apps
  # do a union over all locales, sort, prepend 'l10n/'
  l10n_mod = ['l10n/' + loc for loc in
              sorted(reduce(lambda s,l:s | set(l),locales.values(), set()))]

  apps[tree] = sorted(locales.keys())
  modules['mozilla'][tree] = enUS_mod
  modules['l10n'][tree] = l10n_mod
  
  ld = L10nDispatcher(pathmap, locales, ['linux-langpack'],
                      branch = branchconf['l10n'][tree],
                      tree = tree)
  s.addDispatcher(ld)
  ed = EnDispatcher(pathmap, locales, ['linux-langpack'],
                    branch = branchconf['mozilla'][tree],
                    tree = tree)
  s.addDispatcher(ed)
  
i_f = factory.BuildFactory()
  
i_f.buildClass = Build
  
i_f.addStep(CVSCO, workdir = WithProperties('%(tree)s'),
            cvsroot=r.mozilla.repository,
            cvsmodule = modules['mozilla'], branch=branchconf['mozilla'])
i_f.addStep(MakeCheckout, workdir = WithProperties('%(tree)s/mozilla'),
            apps = apps,
            command = ['make', '-f', 'client.mk', 'l10n-checkout'])
i_f.addStep(CVSCO, workdir = WithProperties('%(tree)s'),
            cvsroot=r.l10n.repository,
            cvsmodule = modules['l10n'], branch = branchconf['l10n'])
i_f.addStep(CompareLocale, workdir = WithProperties('%(tree)s'),
            locale = WithProperties('%(locale)s'),
            application = WithProperties('%(app)s'))
i_f.addStep(Configure, app = WithProperties('%(app)s'),
            srcdir = '../mozilla',
            args = ['--disable-compile-environment', '--disable-xft'],
            workdir = WithProperties('%(tree)s/%(app)s'))
i_f.addStep(ShellCommand,
            workdir = WithProperties('%(tree)s/%(app)s/%(app)s/locales'),
            command = ['make', WithProperties('langpack-%(locale)s')])
i_f.addStep(Upload,
            workdir = WithProperties('%(tree)s/%(app)s/dist/install'),
            scp_dest = WithProperties('~/public_html/%(tree)s'),
            http_dest = WithProperties('http://l10n.mozilla.org/~buildslave/%(tree)s'))

linux_builder = {'name': 'linux-langpack',
                 'slavenames': ['1slave','2slave','3slave'],
                 'builddir': 'linux-langpack',
                 'factory': i_f,
                 }
c['builders'].append(linux_builder)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

#from buildbot.status.html import WebStatus
from buildbotcustom.status.l10n import WebStatus, LatestL10n
public = WebStatus(http_port="tcp:8373:interface=127.0.0.1",
                   allowForce=False)
private = WebStatus(http_port="tcp:8374:interface=127.0.0.1",
                    allowForce=True)

c['status'] = [public, private]
c['status'].append(LatestL10n())

if True:
  from buildbot.status.tinderbox import TinderboxMailNotifier
  tbn = TinderboxMailNotifier(fromaddr="l10n@mozilla.com",
                              tree="MozillaTest",
                              columnName = WithProperties("%(buildername)s %(slavename)s"),
                              extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                              builders = ['linux-langpack'],
                              logCompression="bzip2")
  c['status'].append(tbn)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "L10n Trunk"
c['projectURL'] = "http://wiki.mozilla.org/L10n:Incubator"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8374/"
c['buildbotURL'] = "http://l10n.mozilla.org/buildbot/"
